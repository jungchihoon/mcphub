version: '3.8'

services:
  mcphub:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: docker
        REQUEST_TIMEOUT: 60000
        INSTALL_PLAYWRIGHT: false
    container_name: mcphub-test
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REQUEST_TIMEOUT=60000
      - JWT_SECRET=test-jwt-secret-for-local-docker-testing
      - JWT_EXPIRES_IN=24h
      - DATABASE_URL=postgresql://mcphub:password@postgres:5432/mcphub
      # v3.1 환경변수 스케줄러 설정
      - ENV_SCHEDULER_ENABLED=true
      - ENV_SCHEDULER_INTERVAL_HOURS=1
      - ENV_SCHEDULER_AUTO_CLEANUP=true
      - ENV_SCHEDULER_MAX_ORPHANED_KEYS=10
      # 주의: MCP 서버 토큰들은 DB에서 사용자별로 관리됨
      # Docker 환경변수로 설정할 필요 없음 (v3.0+ 자동 관리 시스템)
    volumes:
      - ./mcp_settings.json:/app/mcp_settings.json:ro
      - ./servers.json:/app/servers.json:ro
      - mcphub_data:/app/data
      - mcphub_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcphub-test
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: mcphub-postgres-test
    environment:
      - POSTGRES_DB=mcphub
      - POSTGRES_USER=mcphub
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./migrations/v3.0.0-schema-migration.sql:/docker-entrypoint-initdb.d/v3.0.0-schema-migration.sql:ro
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U mcphub -d mcphub']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mcphub-test

volumes:
  postgres_test_data:
  mcphub_data:
  mcphub_logs:

networks:
  mcphub-test:
    driver: bridge
