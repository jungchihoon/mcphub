# MCPHub v2.0 개발 가이드라인

## 📋 필수 참조 문서
항상 다음 문서들을 참고하여 일관성 있는 개발을 진행하세요:

### 🎯 프로젝트 상태 및 아키텍처
- `docs/mcphub-project-status.md` - 전체 프로젝트 현황, 완료된 기능, 진행 중인 작업
- `docs/database-schema.md` - 데이터베이스 스키마, 사용자 관리 시스템
- `docs/mcphub-env-var-system.md` - 환경변수 자동화 시스템
- `docs/release-notes/v2.0.0-release-2025-07-31.md` - v2.0 변경사항 및 기능

### 🔧 기술 문서
- `README.md` - 프로젝트 개요, 빠른 시작, 핵심 기능
- `docs/api-reference.md` - API 엔드포인트 명세
- `mcp_settings.json` - MCP 서버 설정 및 환경변수 템플릿

## 🎯 개발 원칙

### 1. 사용자 관리 시스템 (v2.0 완성)
- **DB 기반**: PostgreSQL + TypeORM 사용, JSON 파일 의존성 제거
- **권한 관리**: isAdmin, isActive 필드로 세밀한 제어
- **보호 로직**: 최소 1명 관리자 유지, 자기 자신 비활성화 방지
- **API 키 제한**: 비활성화된 사용자는 MCPHub Key 사용 불가

### 2. 환경변수 시스템 (완전 자동화)
- **템플릿 형식**: `${USER_*}` 패턴 사용 (예: `${USER_GITHUB_TOKEN}`)
- **자동 감지**: `src/utils/variableDetection.ts`의 `extractUserEnvVars()` 활용
- **보안**: 하드코딩된 토큰 절대 금지, GitHub Secret Scanning 준수
- **UI 자동 생성**: 환경변수 필드 동적 생성

### 3. MCP 프로토콜 (2025-06-18)
- **최신 버전**: 2025-06-18 프로토콜 버전 사용
- **서버 추상화**: 개별 툴 대신 서버 단위로 그룹화
- **동적 연결**: 하드코딩된 서버명 금지, `mcp_settings.json` 기반 동적 처리
- **에러 처리**: 서버 연결 실패 시에도 전체 시스템 안정성 유지

### 4. UI/UX 일관성
- **통합 레이아웃**: MainLayout 사용, AdminLayout 제거됨
- **권한 기반 라우팅**: ProtectedRoute의 requireAdmin 옵션 활용
- **사용자 정보**: Header.tsx 우측 상단에 표시
- **반응형**: Tailwind CSS 기반 모바일 친화적 디자인

## 🔒 보안 가이드라인

### 1. 토큰 관리
```typescript
// ✅ 올바른 환경변수 사용
headers: {
  "Authorization": "Bearer ${USER_GITHUB_TOKEN}"
}

// ❌ 절대 금지: 하드코딩
headers: {
  "Authorization": "Bearer ghp_xxxxxxxxxxxx"
}
```

### 2. 로그 보안
```typescript
// ✅ 토큰 마스킹
console.log(`Token: ${token.substring(0, 10)}...`);

// ❌ 절대 금지: 전체 토큰 노출
console.log(`Token: ${token}`);
```

### 3. 사용자 검증
```typescript
// ✅ 사용자 활성화 상태 확인
if (!user.isActive) {
  throw new Error('User is not active');
}

// ✅ 관리자 권한 확인
if (requireAdmin && !user.isAdmin) {
  throw new Error('Admin access required');
}
```

## 📊 데이터베이스 패턴

### 1. 사용자 관리
```typescript
// UserRepository 메서드 활용
await userRepository.setUserActive(userId, isActive);
await userRepository.setAdminRole(userId, isAdmin);
await userRepository.softDeleteUser(userId); // 또는 hardDeleteUser
```

### 2. 환경변수 저장
```typescript
// mcphub_keys.serviceTokens JSONB 필드 사용
const tokens = {
  GITHUB_TOKEN: "...",
  ATLASSIAN_TOKEN: "...",
  JIRA_API_TOKEN: "..."
};
```

## 🛠️ 개발 워크플로

### 1. 새 기능 개발 시
1. 관련 문서 먼저 확인 (`docs/` 디렉토리)
2. 기존 패턴과 일관성 유지
3. 타입 안전성 보장 (TypeScript strict mode)
4. 에러 처리 포함
5. 보안 검토 (토큰 노출, 권한 확인)

### 2. API 개발 시
1. `src/controllers/` 에 비즈니스 로직
2. `src/routes/index.ts` 에 라우팅
3. 인증 미들웨어 적용
4. 에러 응답 일관성 유지

### 3. 프론트엔드 개발 시
1. `frontend/src/components/` 컴포넌트 재사용
2. `frontend/src/hooks/` 커스텀 훅 활용
3. `frontend/src/services/` API 호출 로직
4. 반응형 디자인 고려

## 🔍 코드 리뷰 체크리스트

### ✅ 필수 확인사항
- [ ] 환경변수 하드코딩 없음
- [ ] 사용자 권한/활성화 상태 확인
- [ ] 에러 처리 포함
- [ ] 타입 안전성 보장
- [ ] 기존 패턴과 일관성
- [ ] 보안 취약점 없음
- [ ] 문서 업데이트 필요 시 반영

### 🚨 절대 금지사항
- 하드코딩된 API 토큰/비밀번호
- 사용자 권한 검증 누락
- NULL 포인터 참조 가능성
- 비동기 함수의 에러 처리 누락
- 직접적인 DB 쿼리 (Repository 패턴 사용)

## 📁 프로젝트 구조 이해

```
MCPHub/
├── src/                      # 백엔드 소스코드
│   ├── controllers/         # API 컨트롤러
│   ├── services/           # 비즈니스 로직 (MCP 서버 관리)
│   ├── db/                 # 데이터베이스 엔티티/리포지토리
│   ├── utils/              # 환경변수 감지 등 유틸리티
│   └── routes/             # API 라우팅
├── frontend/               # React 프론트엔드
│   ├── src/components/     # UI 컴포넌트
│   ├── src/pages/          # 페이지 컴포넌트
│   ├── src/hooks/          # 커스텀 훅
│   └── src/services/       # API 통신
├── docs/                   # 📋 프로젝트 문서 (필수 참조!)
└── mcp_settings.json      # MCP 서버 설정
```

## 🎯 현재 시스템 상태 (v2.0)

### ✅ 완료된 기능
- MCP 프로토콜 2025-06-18 지원
- 완전한 사용자 관리 시스템
- 환경변수 완전 자동화
- UI/UX 통합 및 개선
- 보안 대폭 강화
- 서버 추상화 시스템

### 🔧 연결된 MCP 서버
- **GitHub PR MCP (ACA)**: 6개 툴 정상 연결
- **mcp-atlassian**: 환경변수 설정 시 42개 툴 사용 가능

이 가이드라인을 항상 참고하여 MCPHub의 일관성과 품질을 유지해주세요!